#include "approximation.cpp"
#include "Parser.hpp"


using namespace std;



pair<bool,array<string, 4>> treatProgrammeEntry(int argc, char * argv[])
{
  int opt;
  bool generate_matches=false;
  array<string, 4> optionsValues = {"-1","-1","output.fasta","output.cons"};

  while((opt = getopt(argc, argv, ":hco:r:f:m:")) !=-1) {
      switch (opt)
	{
	case 'f':
	  optionsValues[0]=optarg;
	  break;
	case 'm':
	  optionsValues[1]=optarg;
	  break;
	case 'r':
	  optionsValues[2]=optarg;
	  break;
       	case 'o': 
	  optionsValues[3]=optarg;
	  break;
	case 'c':
	  generate_matches=true;
	  break;
	case 'h':
	default:
	  cout << "Available options:\n";
	  cout << "-o output .cons file name (default output.cons)\n";
	  cout << "-r result fasta file (default output.fasta)\n";
	  cout << "-f fasta directory\n";
	  cout << "-m match directory: ";
	  cout << "Input files must be generated by blastn using the command: \n";
	  cout << "\t blastn -task megablast -query file1.fasta -subject file2.fasta -ungapped -out inputFileName -outfmt \"6 score qseqid qstart qend qlen sseqid sstart send slen\"";
	  cout << "-c generates matches files with blastn";
	  cout << endl;
	  exit(EXIT_SUCCESS);
	  break;
	}
  }
  if(optionsValues[0]=="-1") {
      cout << "Error, fasta directory not provided\n";
      exit(EXIT_FAILURE);
  }
  if(optionsValues[1]=="-1") {
    cout << "Error, match directory not provided\n";
    exit(EXIT_FAILURE);
  }

  return make_pair(generate_matches,optionsValues);
}


int main(int argc, char *argv[])
{

  AssemblySet assembly_sets;
  MatchMatrix matches;

  map<string,unsigned> ids;

  auto options = treatProgrammeEntry(argc, argv); 

  
  treatFastaDirectory(options.second[0].c_str(), assembly_sets, ids);
  if(options.first)
    createMatchDirectory(options.second[1].c_str(), options.second[0].c_str(), ids);
  treatMatchDirectory(options.second[1].c_str(), assembly_sets, ids, matches);

  std::cout << "Consensus construction" << std::endl;
  
  merge_algorithm(assembly_sets,matches,ids);

  output_contig(options.second[2].c_str(),assembly_sets);
  output_contig_ordering(options.second[3].c_str(),assembly_sets, ids);

  return 0;
}

