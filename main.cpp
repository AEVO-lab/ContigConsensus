
#include "approximation.cpp"
#include "Parser.hpp"


using namespace std;



array<string, 4> treatProgrammeEntry(int argc, char * argv[])
{
  int opt;
  array<string, 4> optionsValues = {"-1","-1","output.fasta","output.cons"};

  while((opt = getopt(argc, argv, ":ho:r:f:m:")) !=-1) {
      switch (opt)
	{
	case 'f':
	  optionsValues[0]=optarg;
	  break;
	case 'm':
	  optionsValues[1]=optarg;
	  break;
	case 'r':
	  optionsValues[2]=optarg;
	  break;
       	case 'o': 
	  optionsValues[3]=optarg;
	  break;
		
	case 'h':
	default:
	  cout << "Available options:\n";
	  cout << "-o output .cons file name (default output.cons)\n";
	  cout << "-r result fasta file (default output.fasta)\n";
	  cout << "-f fasta directory\n";
	  cout << "-m match directory: ";
	  cout << "Input files must be generated by blastn using the command: \n";
	  cout << "\t blastn -task megablast -query file1.fasta -subject file2.fasta -out inputFileName -outfmt \"6 score qseqid qstart qend qlen sseqid sstart send slen\"";
	  cout << endl;
	  exit(EXIT_SUCCESS);
	  break;
	}
  }
  if(optionsValues[0]=="-1") {
      cout << "Error, fasta directory not provided\n";
      exit(EXIT_FAILURE);
  }
  if(optionsValues[1]=="-1") {
    cout << "Error, match directory not provided\n";
    exit(EXIT_FAILURE);
  }

  return optionsValues;
}


int main(int argc, char *argv[])
{
  AssemblySet assembly_sets;
  MatchMatrix matches;

  map<string,unsigned> ids;

  auto options = treatProgrammeEntry(argc, argv);

  
  treatFastaDirectory(options[0].c_str(), assembly_sets, ids);  
  treatMatchDirectory(options[1].c_str(), assembly_sets, ids, matches);


  merge_algorithm(assembly_sets,matches,ids);

  
  
  output_contig(options[2].c_str(),assembly_sets);
  output_contig_ordering(options[3].c_str(),assembly_sets, ids);
  
}

